{"version":3,"sources":["NameForm.js","PlayerList.js","SameRoleList.js","App.js","serviceWorker.js","index.js"],"names":["NameForm","players","fetchPlayers","setNameEntered","user","useState","name","setName","onSubmit","e","preventDefault","map","player","includes","alert","axios","post","then","type","onChange","target","value","PlayerList","playerList","JustTheList","index","key","SameRoleList","displayedRole","indexes","playerSubset","action","slice","vote","get","res","console","log","VoteOptions","onClick","App","setPlayers","role","setRole","gameStart","setGameStart","setIndexes","useEffect","data","start","a","tmp","Math","floor","length","Message","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.db43c972.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Allows new player to enter their name\r\n *\r\n */\r\nconst NameForm = ({players, fetchPlayers, setNameEntered}) => {\r\n  let user = '';\r\n  const [name, setName] = useState('');\r\n\r\n  const handleNameInput = (e) => {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    user = {\r\n      name: name\r\n    };\r\n    let playerNames = players.map(player => player.name);\r\n    if(!playerNames.includes(name)) {\r\n      axios.post(`http://localhost:8080/api/v1/player/`, user)\r\n      .then(\r\n        fetchPlayers\r\n      ).then(\r\n        setNameEntered(name)\r\n      )\r\n    } else {\r\n      alert(\"Name already taken\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Enter Your Name:\r\n          <input type=\"text\" onChange={handleNameInput} />\r\n        </label>\r\n        <button type=\"submit\">Enter</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default NameForm;","import React from 'react';\r\n\r\n\r\n\r\n/**\r\n * List of Players\r\n */\r\nconst PlayerList = ({playerList}) => {\r\n  const JustTheList = () => {\r\n    return playerList.map((player, index) => {\r\n      return (\r\n      <div key={index}>\r\n        <h3>{player.name}</h3>\r\n      </div>\r\n      )\r\n    })\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Here are your players:</h1>\r\n      <JustTheList />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default PlayerList;","import React from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Displays everyone with displayedRole\r\n *\r\n */\r\nconst SameRoleList = ({name, players, displayedRole, indexes}) => {\r\n\r\n    let playerSubset = [];\r\n    let action = '';\r\n    if(displayedRole === 'Civilian') {\r\n        return(\r\n            <div>\r\n                <h1>You are a Civilian</h1>\r\n                <h3>You are sleeping</h3>\r\n            </div>\r\n        )\r\n    }\r\n    if(displayedRole === 'Mafia') {\r\n        playerSubset = players.slice(0, indexes[0]);\r\n        action = 'murder';\r\n    }\r\n    else if(displayedRole === 'Nurse') {\r\n        playerSubset = players.slice(indexes[0], indexes[1]);\r\n        action = 'heal';\r\n    }\r\n    else if(displayedRole === 'Detective') {\r\n        playerSubset = players.slice(indexes[1], indexes[2]);\r\n        action = 'investigate';\r\n    }\r\n\r\n    const JustTheList = () => {\r\n        return playerSubset.map((player, index) => {\r\n            return (player.name === name ? <div key={index}/> :\r\n            <div key={index}>\r\n                <h3>{player.name}</h3>\r\n            </div>\r\n            )}\r\n        )\r\n    };\r\n\r\n    const vote = (name) => {\r\n        axios.get(`http://localhost:8080/api/v1/player/${displayedRole}/${name}`).then(res => {\r\n            if(res!=null) {\r\n                console.log(`${displayedRole}'s choice is ${res.name}`)\r\n            }\r\n        })\r\n    }\r\n    const VoteOptions = () => {\r\n        return players.map((player, index) => {\r\n            return (\r\n                <div key={index}>\r\n                    <button onClick={vote(player.name)}>{player.name}</button>\r\n                </div>\r\n            )}\r\n        )\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <h2>Your role is: {displayedRole}</h2>\r\n            <h3>Your other {displayedRole}'s are: </h3>\r\n            <JustTheList />\r\n            <h3>Who would you like to {action}?</h3>\r\n            <VoteOptions />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SameRoleList","// eslint-disable-next-line\r\nimport React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport NameForm from './NameForm';\r\nimport PlayerList from './PlayerList';\r\nimport SameRoleList from './SameRoleList';\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\n  const [players, setPlayers] = useState([]);\r\n  const [name, setName] = useState('');\r\n  const [role, setRole] = useState('');\r\n  const [gameStart, setGameStart] = useState(false);\r\n  const [indexes, setIndexes] = useState([]);\r\n\r\n  const fetchPlayers = () => {\r\n    axios.get(\"http://localhost:8080/api/v1/player\").then(res => {\r\n      setPlayers(res.data);\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    axios.get(\"http://localhost:8080/api/v1/player\").then(res => {\r\n      setPlayers(res.data);\r\n    })\r\n  }, [])\r\n\r\n  \r\n\r\n  /**\r\n   * Starts the game. Randomly assigns roles to players and sets your role.\r\n   */\r\n  const start = async () => {\r\n    axios.get(\"http://localhost:8080/api/v1/player\", {'headers': {\"action\":\"assign-roles\"} }).then( (res) => {\r\n      axios.get(`http://localhost:8080/api/v1/player/${name}`).then( res => {\r\n        setRole(res.data.role);\r\n      })\r\n      setPlayers(res.data);\r\n      const tmp = [0, 0, 0];\r\n      tmp[0] = Math.floor(players.length/3);\r\n      tmp[1] = tmp[0] + Math.floor(players.length/4);\r\n      tmp[2] = tmp[1] + Math.floor(players.length/4);\r\n      setIndexes(tmp);\r\n      setGameStart(true);\r\n    })\r\n  };\r\n\r\n  const Message = () => {\r\n    return (\r\n      <div>\r\n        <h1>Your name is: {name} </h1>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  //TODO: Make the Start Game button disappear once clicked\r\n  return (\r\n    <div className=\"App\">\r\n      {name==='' ?\r\n        <div>\r\n          <NameForm players={players} fetchPlayers={fetchPlayers} setNameEntered={setName}/>\r\n        </div>\r\n        :\r\n        <div>\r\n          <Message />\r\n        </div>\r\n      }\r\n      {!gameStart ?\r\n        <div>\r\n          <PlayerList playerList={players} />\r\n        </div> :\r\n        <SameRoleList name={name} players={players} displayedRole={role} indexes={indexes}/>\r\n      }\r\n      {name !=='' && !gameStart ? <button onClick={start}>Start Game</button> : <div/>}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}